swagger: "2.0"
info:
  title: "emojiApp"
  version: "0.0.1"
  #192.168.0.194
  # 66.70.179.133
host: "66.70.179.133:8092"
basePath: "/emojiApp/v2/api"
consumes:
- "application/json"
- "application/x-www-form-urlencoded"
produces:
- "application/json"
schemes:
- "http"
tags:
  - name: user
    description: "user api"
  - name: admin
    description: "admin api"
paths:
  "/user/login":
      post:
        tags:
        - "user"
        summary: Authenticating user
        parameters: 
          - in: body
            name: user
            description: For simple login request.
            required: true
            schema:
              type: object
              required:
                - emailId
                - password
               
              properties:
                emailId:
                    type: string
                
                password:
                    type: string
              
                 
        responses:
          "200":
            description: "Login Successfull"
            schema:
              $ref: "#/definitions/login"
          "401":
            description: "Incorrect password"
            schema:
              $ref: "#/definitions/PassNotMatch"
          "400":
            description: "User not found."
            schema:
              $ref: "#/definitions/UserNotFound"
  "/user/register":
      post:
        tags:
        - "user"
        summary: New users registation request
        parameters: 
          - in: body
            name: user
            description: For simple registration request.
            required: true
            schema:
              type: object
              required:
                - userName
                - fullName
                - contactNumber
                - emailId
                - password
                - deviceToken
                - deviceType
               
              properties:
                userName:
                    type: string
                fullName:
                    type: string
                contactNumber:
                    type: string
                emailId:
                    type: string
                password:
                    type: string
                
                deviceToken:
                    type: string
                deviceType:
                    type: string 
                    enum:
                    - "IOS"
                    - "ANDROID"
               
        responses:
          "200":
            description: "Registered sucessfully"
            schema:
              $ref: "#/definitions/UserExist"
          "400":
            description: "Please provide all the required fields."
            schema:
              $ref: "#/definitions/UserExist"
    
  "/user/socialLogin":
      post:
        tags:
        - "user"
        summary: Authenticating user from facebook
        parameters: 
          - in: body
            name: user
            description: Login using social.
            required: true
            schema:
              type: object
              required:
                - socialId
                - fullName
                - userName
                - loginType
                - deviceType
                - deviceToken
              properties:
                socialId:
                    type: string
                fullName:
                    type: string
                userName:
                    type: string
                loginType:
                    type: string 
                    enum:
                    - "noramal"
                    - "social"
                deviceType:
                    type: string
                    enum:
                    - "IOS"
                    - "ANDROID"
                deviceToken: 
                    type: string 
               
                
        responses:
          "201":
            description: "Login Successfull"
            schema:
              $ref: "#/definitions/UserExist"
          "200":
            description: "Sucessfully register."
            schema:
              $ref: "#/definitions/fbMap"
  "/user/forgotPassword":
      post:
        tags:
        - "user"
        summary: Sending new password to user registered mail.
        parameters: 
          - in: body
            name: user
            description: Forgot password api.
            required: true
            schema:
              type: object
              required:
                - emailId
              properties:
                emailId:
                    type: string   
        responses:
          "200":
            description: "Success"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "User not exist."
            schema:
              $ref: "#/definitions/UserNotFound"
  "/user/changePassword/{id}":
      put:
        tags:
        - "user"
        summary: Change password request
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
          - in: body
            name: body
            required: true
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
             
        responses:
          "200":
            description: "Password reset sucessfullly"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Old password didn't match."
            schema:
              $ref: "#/definitions/UserNotFound"            
          "404":
            description: "User not found."
            schema:
              $ref: "#/definitions/UserNotFound"
  "/user/verifyAccount/{id}":
      post:
        tags:
        - "user"
        summary: Verify account request
        parameters: 
         
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
          - in: body
            name: body
            required: true
            schema:
              type: object
              required:
                - pin
                
              properties:
                pin:
                  type: string
                
                          
        responses:
          "200":
            description: "PIN verified sucessfully"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Invalid pin"
            schema:
              $ref: "#/definitions/UserNotFound"       
  "/user/resendPin/{id}":
      get:
        tags:
        - "user"
        summary: Verify account request
        parameters: 
         
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
          
            
                          
        responses:
          "200":
            description: "Pin sent Sucessfully"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Invalid user"
            schema:
              $ref: "#/definitions/UserNotFound"       
  
  "/user/editProfile/{id}":
      put:
        tags:
        - "user"
        summary: Edit profile request
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
          - in: body
            name: body
            required: true
            schema:
              type: object
              required:
                - userName
                - image
                
                
              properties:
                userName:
                  type: string
                image:
                  type: string
        responses:
          "200":
            description: "Succesfully edited"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Invalid user"
            schema:
              $ref: "#/definitions/UserNotFound"  
              
  "/user/imageUpload":
    post:
      tags:
      - "user"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      
      
      - name: "img"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
          "200":
            description: "Sucess"
            schema:
              $ref: "#/definitions/imageUpload"           
          "400":
            description: "internal server error"
            schema:
              $ref: "#/definitions/UserNotFound" 
               
  # "/user/imageUpload":
  #     post:
  #       tags:
  #       - "user"
  #       summary: Upload picture api
  #       consumes:
  #         - "application/json"
         
  #       produces:
  #         - "application/json"
  #       parameters: 
  #         # - in: formData
  #         #   name: file
  #         #   required: true
  #         #   type: file
  #           - name: "additionalMetadata"
  #             in: "formData"
  #             description: "Additional data to pass to server"
  #             required: false
  #             type: "string"
  #           - name: "file"
  #             in: "formData"
  #             description: "file to upload"
  #             required: false
  #             type: "file"
           
  #       responses:
  #         "200":
  #           description: "Sucess"
  #           schema:
  #             $ref: "#/definitions/imageUpload"           
  #         "400":
  #           description: "internal server error"
  #           schema:
  #             $ref: "#/definitions/UserNotFound" 
              
  # "/user/imageUpload":
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "uploads an image"
  #     description: ""
  #     operationId: "uploadFile"
  #     consumes:
  #     - "multipart/form-data"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to update"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "additionalMetadata"
  #       in: "formData"
  #       description: "Additional data to pass to server"
  #       required: false
  #       type: "string"
  #     - name: "file"
  #       in: "formData"
  #       description: "file to upload"
  #       required: false
  #       type: "file"
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/ApiResponse"
    
              
  "/admin/getAllUser":
      get:
        tags:
        - "admin"
        summary: Get list of all users
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
        responses:
          "200":
            description: "Sucess"
            schema:
              $ref: "#/definitions/Success"           
          "400":
            description: "User not found."
            schema:
              $ref: "#/definitions/UserNotFound"       
 
  "/admin/getOneUser/{id}":
      get:
        tags:
        - "admin"
        summary: Get data of particular user
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
        responses:
          "200":
            description: "Sucess"
            schema:
              $ref: "#/definitions/Success"           
          "400":
            description: "User not found."
            schema:
              $ref: "#/definitions/UserNotFound"       
 
  "/admin/updateUser/{id}":
      put:
        tags:
        - "admin"
        summary: Edit user profile request
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
          - in: body
            name: body
            
            schema:
              type: object
             
                
                
              properties:
                userName:
                    type: string
                fullName:
                    type: string
                contactNumber:
                    type: string
                emailId:
                    type: string
                image:
                  type: string
              
        responses:
          "200":
            description: "Succesfully edited"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Invalid user"
            schema:
              $ref: "#/definitions/UserNotFound"


  "/admin/deleteUser/{id}":
      put:
        tags:
        - "admin"
        summary: Delete user profile request
        parameters: 
          - in: header
            name: authorization
            description: Token of particular user
            required: true
            type: string
          - in: path
            name: id
            description: Id of particular user
            required: true
            type: string
        responses:
          "200":
            description: "Deleted successfully"
            schema:
              $ref: "#/definitions/UserNotFound"
          "400":
            description: "Invalid user"
            schema:
              $ref: "#/definitions/UserNotFound"
                
                
            
                   
definitions:  
  loginResponse:
    type: "object"
    required: 
    - "id"
    - "fullName"
    - "userName"
    - "emailId"
    - "contactNumber"
    properties:
      id:
        type: "string"
      fullName:
        type: "string"
      userName:
        type: "string"
      contactNumber: 
        type: "string"
      emailId:
        type: "string"
        
  login:
    type: "object"
    properties:
      responseCode: 
        type: "integer"
      responseMessage:
        type: "string"
      token:
        type: "string"
      user:
        $ref: "#/definitions/loginResponse"

  Success:
    type: "object"
    properties:
      responseCode: 
        type: "integer"
      responseMessage:
        type: "string"
      user:
        $ref: "#/definitions/loginResponse"        
          
  
  
  
          
  PassNotMatch:
    type: "object"
    properties:
      responseCode:
        type: 'integer'
      responseMessage:
        type: 'string'
    
  # idField:
  #   type: 'object'
  #   properties:
  #     id:
  #       type: 'string'
  #     fullName:
  #       type: 'string'
  #     emailId: 
  #       type: 'string'
  #     gender: 
  #       type: 'string'  
  fbObj:
    type: 'object'
    properties:
      fullName:
        type: 'string'
      userName: 
        type: 'string'
      _id: 
        type: 'string'
 
        
  UserExist:
    type: "object"
    properties:
      responseCode:
        type: 'integer'
      responseMessage:
        type: 'string'  
  
  
  UserNotFound:
    type: "object"
    properties:
      responseCode:
        type: 'integer'
      responseMessage:
        type: 'string'
    
  imageUpload:
    type: 'object'
    properties:
      responseCode:
        type: 'integer'
      responseMessage:
        type: 'string'
      data:
        type: 'string'
        
  fbMap: 
    type: 'object'
    properties:
      responseCode:
        type: 'integer'
      responseMessage:
        type: 'string'
      userProfile:
        $ref: "#/definitions/fbObj"
  # imageUpload:
  #   type: 'object'
  #   properties:
  #     responseCode:
  #       type: 'integer'
  #     responseMessage:
  #       type: 'string'
  #     url:
  #       type: 'string'
  
  
  
  
        
  
          
   
        
 
  
       